diff -uartN gcc-8.1.0-orig/gcc/pretty-print.c gcc-8.1.0/gcc/pretty-print.c
--- gcc-8.1.0-orig/gcc/pretty-print.c	2018-01-03 10:03:58 +0000
+++ gcc-8.1.0/gcc/pretty-print.c	2018-05-27 08:40:31 +0000
@@ -42,6 +42,14 @@
 #define WIN32_LEAN_AND_MEAN 1
 #include <windows.h>
 
+#ifndef COMMON_LVB_REVERSE_VIDEO
+#define COMMON_LVB_REVERSE_VIDEO 0x4000
+#endif
+
+#ifndef COMMON_LVB_UNDERSCORE
+#define COMMON_LVB_UNDERSCORE 0x8000
+#endif
+
 /* Write all bytes in [s,s+n) into the specified stream.
    Errors are ignored.  */
 static void
diff -uartN gcc-8.1.0-orig/libstdc++-v3/libsupc++/del_opa.cc gcc-8.1.0/libstdc++-v3/libsupc++/del_opa.cc
--- gcc-8.1.0-orig/libstdc++-v3/libsupc++/del_opa.cc	2018-01-03 10:03:58 +0000
+++ gcc-8.1.0/libstdc++-v3/libsupc++/del_opa.cc	2018-05-27 04:35:27 +0000
@@ -24,6 +24,7 @@
 // <http://www.gnu.org/licenses/>.
 
 #include <bits/c++config.h>
+#include <malloc.h>
 
 #if !_GLIBCXX_HOSTED
 // A freestanding C runtime may not provide "free" -- but there is no
@@ -50,7 +51,7 @@
     || _GLIBCXX_HAVE_MEMALIGN
   std::free (ptr);
 #elif _GLIBCXX_HAVE__ALIGNED_MALLOC
-  _aligned_free (ptr);
+  __mingw_aligned_free (ptr);
 #else
   if (ptr)
     std::free (((void **) ptr)[-1]); // See aligned_alloc in new_opa.cc
diff -uartN gcc-8.1.0-orig/libstdc++-v3/libsupc++/new_opa.cc gcc-8.1.0/libstdc++-v3/libsupc++/new_opa.cc
--- gcc-8.1.0-orig/libstdc++-v3/libsupc++/new_opa.cc	2018-01-03 10:03:58 +0000
+++ gcc-8.1.0/libstdc++-v3/libsupc++/new_opa.cc	2018-05-27 04:35:34 +0000
@@ -24,6 +24,7 @@
 // <http://www.gnu.org/licenses/>.
 
 #include <bits/c++config.h>
+#include <malloc.h>
 #include <stdlib.h>
 #include <bits/exception_defines.h>
 #include "new"
@@ -33,7 +34,7 @@
 
 #if !_GLIBCXX_HAVE_ALIGNED_ALLOC
 #if _GLIBCXX_HAVE__ALIGNED_MALLOC
-#define aligned_alloc(al,sz) _aligned_malloc(sz,al)
+#define aligned_alloc(al,sz) __mingw_aligned_malloc(sz,al)
 #elif _GLIBCXX_HAVE_POSIX_MEMALIGN
 static inline void*
 aligned_alloc (std::size_t al, std::size_t sz)
